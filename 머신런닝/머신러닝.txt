   <머신러닝 과정 정리>
0. 데이터 준비(수집 등)
1. 데이터 전처리: 오류데이터 보정, null값 처리 등 데이터 클렌징작업, 
    LableEncoding, OneHotEncoder, 데이터 스케일링, 정규화 작업
    StandardScaler, MinMaxScaler
2. 데이터 분리 및 교차검증 : train_test_split
3. 머신러닝 : 모델(알고리즘) 선택
  - 모델학습  dt_clf = DecisionTreeClassifier(random_state = 0)
             dt_clf.fit(X_train, y_train)
        ==> 반복수행하며 학습방법을 바꿔 성능향상
  - 예측     pred = dt_clf.predict(X_test)
  - 평가(방법 선택, 기준잡기)  
            acc = accuracy_score(y_test, pred)
4. 교차검증: KFold, StratifiedKFold
            cross_val_score, cross_validate, GridSearchCV
5. 최적의 모델, 방법으로 반복
     학습,예측,평가 반복하기
5. 반복 또는 완전히 학습종료 후, 테스트 및 배포

<scikit-learn 파일 구성>
독립변수: data(값,row)   /feature_names
종속변수: target(값,label,columns) / target_names, cross_validate

<자주 쓰는 scikit-learn 모듈>
import sklearn
from sklearn.datasets import load_iris
from sklearn.tree import DecisionTreeClassifier,
                         DecisionTreeRegressor
from sklearn.model_selection import train_test_split, KFold, StratifiedKFold
                         cross_val_score, cross_validate, GridSearchCV
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder,OneHotEncoder
                         StandardScaler,MinMaxScaler

1. 데이터 전처리/데이터셋트 분리
-df로 만들기 / 사이킷런은 딕셔널리 비슷
df = pd.DataFrame(data['data'], columns = data['feature_names'])
-target 열 만들기
df['target'] = data['target']   # 숫자로 되어 있음
df['target'] = df['target'].apply(lambda x : data['target_names'][x])

- train, test로 데이터 나누기
  :df가 종속변수 + 독립변수 합쳐진 모양일 때 나누는 방법
 방법1)  종속 / 독립 변수로 나눠서 train_test_split한다.
    y_df = df['target']
    x_df = df.drop('target', axis = 1)
    X_train, X_test, y_train, y_test = 
       train_test_split(x_df, y_df, test_size = 0.2, random_state=0)
 방법2) train_test_split을 먼저하고 종속 / 독립 변수로 나누기
    train, test = train_test_split(df, test_size = 0.2, random_state=0)
    y_train = train.loc['target']
    x_train = train[['다른 feature_names']]
    y_test = test.iloc[:, -1]
    x_test = test.iloc[:, :-1]
    
* 함수 train_test_split() 
    from sklearn.model_selection import train_test_split
    X_train, X_test, y_train, y_test 
       =train_test_split(DATA, TARGET,test_size = 0.2,random_state = 0)

    train_test_split(
        *arrays,           # *는 데이터 무한대로 쓸 수 있음
        test_size=None,    # test와 train이 1을 나눠 가짐
        train_size=None,
        random_state=None, # 값을 설정하지 않으면 값 변동됨/ 쓰면 고정됨
        shuffle=True,      # 데이터를 분리하기전 미리 섞을지  
        stratify=None)     # 종속변수의 범주를 균등하게 만들어줌
 
2. 모델학습
    from sklearn.tree import DecisionTreeClassifier
    dt_clf = DecisionTreeClassifier(random_state = 0)
    dt_clf.fit(X_train, y_train)
3. 예측  
    pred = dt_clf.predict(X_test)   
4. 평가  
    from sklearn.metrics import accuracy_score
    acc = accuracy_score(y_test, pred)
   
## 교차검증/ 일반화 검증
1. K_Fold 교차검증
    from sklearn.model_selection import KFold
2. StratifiedKFold 교차검증
    from sklearn.model_selection import StratifiedKFold
3. cross_val_score 교차검증
    from sklearn.model_selection import cross_val_score
    scores = cross_val_score(dt_clf, data, label, scoring = 'accuracy', cv = 5)
4. cross_validate (dt_clf, data, label, scoring = ['accuracy', 'roc_auc_ovo'], cv = 5)

# 하이퍼 파라미터의 성능향상: GridSearchCV
from sklearn.model_selection import GridSearchCV
dtree=DecisionTreeClassifier()
parameters={'max_depth':[1,2,3], 'min_samples_split':[2,3]}
grid_dtree=GridSearchCV(dtree, param_grid=parameters,cv=3,refit=True)

## 데이터 전처리
1. 레이블 인코딩// 필수 전처리 1차원 (종속변수-범주형): 선형회귀에서는 X
from sklearn.preprocessing import LabelEncoder
lb_enc=LabelEncoder()
lb_enc.fit(y)                   # fit은 y의 범주 종류를 저장하는 역할
label_iris=lb_enc.transform(y)  # 위에서 저장한 범주를 맞는 숫자로 변환

=> 방법2) lbe=LabelEncoder()    # 종속 아니어도 독립 2개면 가능
    titanic['Sex']=lbe.fit_transform(titanic_df['Sex'])

2.원-핫 인코딩: 문자를 숫자로 만들기 위해 2차원 희소행렬로 만듦(독립변수-범주형)

(간단한 방법) OneHotEncoder: 3개 이상 독립변수 
oh=OneHotEncoder(sparse_output=False)
C_B=oh.fit_transform(titanic_df[['Cabin','Embarked']])
columns=np.hstack(['Cab_' + oh.categories_[0], 'Emb_'+ oh.categories_[1]])
titanic_df=pd.concat([titanic_df, pd.DataFrame(C_B, columns=columns)], axis=1)

(원칙적 방법)      
oh_encoder = OneHotEncoder()
oh_encoder.fit(items)
oh_labels = oh_encoder.transform(items)  
oh_labels.toarray()      #희소행렬을 toarray()를 이용하여 밀집행렬로 변환
titanic_df[['female','male']]= enc.toarray() # 데이터프레임으로 변환

==> .fit_transform() 데이터프레임이 문자형을 한번에 변환함
    범주형 -> 숫자형으로 변환/ 
    종속변수, 2개 독립변수 일 경우 Label인코드 // 3개 이상 onehot인코더 사용
    숫자형 범주 등 미리 .astype('object')으로 문자형으로 바꾸고 할 것

# pandas 에서는 자동으로 원핫인코딩 해주누는 함수 .get_dummies
# get_dummies - 범주형 변수에서 더미변수를 자동으로 만들어주는 함수
  pd.get_dummies(df) 

3. 데이터 전처리-표준화(독립변수-숫자 정리) // StandardScaler 함
# 평균은 0에, 분산은 1에 가깝게 배열됨 # 수의 값이 끝이 없을때 사용  
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(iris_df)
iris_scaled = scaler.transform(iris_df)
iris_df_scaled = pd.DataFrame(data = iris_scaled, columns = iris.feature_names)

4. 데이터 전처리 -정규화 :표준화와 모두 같고 MinMaxScaler() 여기만 다름
** 수의 값이 끝이 있을때 사용 / 무조건 0-1 사이 값임=> 벗어나면 이상치
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
scaler.fit(iris_df)
iris_scaled = scaler.transform(iris_df)
iris_df_scaled = pd.DataFrame(data = iris_scaled, columns = iris.feature_names)

** train, test 데이터 스케일링 변환시 유의점 **
데이터스케일링 변환 후 학습, 테스트 데이터로 분리할 것!!
안되면, 테스트할때 fit()하지 말고 이미 fit된 scaler객체를 이용하요 transform으로 변환!!


< 알아 둘 것들 -tip>
- np.vstack 넘파이 배열을 수직으로 붙이기/합치기(np.hstack은 수평으로 붙이기
category=np.hstack(('cab_'+ oh_enc.categories_[0],
                               'em_'+ oh_enc.categories_[1] )) #OneHotEncoder

- StandardScaler 한 후에 결과값은 이상치 제거를 위한 z-score 값과 같음
  그러므로 2.5 이상, -2.5 이하값 제거 하면 이상치 제거임
    ==> 이상치 제거 z_score  // titanic_d[titanic_d['Fare'] <=2.5]
    
- 종속변수와 독립변수 나누기
X_titanic=titanic_df.drop(['Survived'], axis=1)
y_titanic=titanic_df['Survived']







