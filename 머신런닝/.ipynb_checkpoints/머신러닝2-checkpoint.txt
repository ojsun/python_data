<분류의 평가: 이진 분류의 예측성능 측정>- 예측 평가
from sklearn.metrics import accuracy_score,confusion_matrix
           recall_score, precision_score, precision_recall_curve
           f1_score, roc_curve
from sklearn.base import BaseEstimator

1) 정확도 (TN+TP)/(TN+TP+FN+FP) :0~1 얼마나 많이 맞추었는지 나타내는 수치   
    accuracy_score(y_test,pred)

2) 오차행렬 
    confusion_matrix(y_test,pred)

3) 정밀도 TP/(FP+TP)    0~1 예측을 1로 했을때 얼마나 맞췄나
    precision_score(y_test,pred)

4) 재현률  TP/(FN+TP)    0~1 실제가 1일때 얼마나 맞췄나
    recall_score(y_test,pred)

    ** 예측확률) predict_proba 
      pred_proba=lr_clf.predict_proba(X_test)
      pred=lr_clf.predict(X_test)
      pred_proba_result=np.concatenate([pred_proba, pred.reshape(-1,1)],axis=1)

    ** 임곗값 조정) Binarize: threshold 조정하여 재현률/정밀도 조정
     # 임곗값 조정하기: 값을 변환해주는 모델
    
    from sklearn.preprocessing import Binarizer
    X = [[ 1, -1, 2],[ 2, 0, 0],[ 0, 1.1, 1.2]]
    binarizer = Binarizer(threshold= 1.1)  # 크야만 1, 작거나 같으면 0
    print(binarizer.fit_transform(X))
    ** 정밀도와 재현률 곡선:  precision_recall_curve
    precisions, recalls, thresholds = precision_recall_curve(y_test, pred_proba_class1 )

5) F1 스코어: 정밀도와 재현률 결합한 지표: 0~1 밸런스가 잘 유지되는지 표현하는 수치
    f1_score(y_test, pred)
    f1_score(y_test, pred, average='macro')   --> 다중 분류(macro)에서의 범주가 다수일 때/ 평균
    f1_score(y_test, pred, average='weighted') --> macro방식에 비율에 따른 가중치 주어 계산
    f1_score(y_test, pred, average='micro')  --> 

6) roc_auc_score  : 0~1, 전반적으로 잘 학습했는지를 표현하는 수치
    ROC 곡선 : 임곗값에 따라 FPR이 변할 때, TPR의 변화 표현
    AUC :roc_auc_score(y_test, pred_proba)

    from sklearn.metrics import roc_auc_score
    pred_proba = lr_clf.predict_proba(X_test)[:, 1]
    roc_score = roc_auc_score(y_test, pred_proba)
    print(f'ROC AUC 값: {roc_score:.4f}')


## 정확도/F1_Score/ROC_ACC_score  ==> 주로 이 3가지 평가 사용
## 정밀도/재현율  ==> 뭘 높일지 방향성 있을때 사용

## 회귀 평가방법은 오차평균값(정대값)으로 평가함 => MAE 
                        또는 제곱한 후 루트화  => MSE


<다중 분류>
1) 평균값으로 f1_score  
    f1_score(y_test, pred, average='macro')   --> 다중 분류(macro)에서의 범주가 다수일 때
    f1_score(y_test, pred, average='weighted') --> macro방식에 비율에 따른 가중치 주어 계산
    f1_score(y_test, pred, average='micro')  
2) ROC_AUC_Score
    roc_auc_score(y_test, pred_proba, multi_class='ovo') : 1:1 1대 일
    roc_auc_score(y_test, pred_proba, multi_class='ovr')  : 1 대 다수






