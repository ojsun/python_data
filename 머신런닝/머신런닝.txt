
1. 데이터 전처리 train_test_split
  X_train, X_test, y_train, y_test 
   =train_test_split(DATA, TARGET,test_size = 0.2,random_state = 11)
2. 머신러닝 
  - 모델 dt_clf = DecisionTreeClassifier(random_state = 0)
         dt_clf.fit(X_train, y_train)
  - 예측  pred = dt_clf.predict(X_test)
  - 평가  acc = accuracy_score(y_test, pred)


<scikit-learn 파일 구성>
독립변수: data(값,row)   /feature_names
종속변수: target(값,label,columns) / target_names

<자주 쓰는 scikit-learn 모듈>
import sklearn
from sklearn.datasets import load_iris
from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

1. 데이터 전처리/데이터셋트 분리
-df로 만들기 / 사이킷런은 딕셔널리 비슷
df = pd.DataFrame(data['data'], columns = data['feature_names'])
-target 열 만들기
df['target'] = data['target']   # 숫자로 되어 있음
df['target'] = df['target'].apply(lambda x : data['target_names'][x])

- train, test로 데이터 나누기
  :df가 종속변수 + 독립변수 합쳐진 모양일 때 나누는 방법
 방법1)  종속 / 독립 변수로 나눠서 train_test_split한다.
    y_df = df['target']
    x_df = df.drop('target', axis = 1)
    X_train, X_test, y_train, y_test = 
       train_test_split(x_df, y_df, test_size = 0.2, random_state=0)
 방법2) train_test_split을 먼저하고 종속 / 독립 변수로 나누기
    train, test = train_test_split(df, test_size = 0.2, random_state=0)
    y_train = train.loc['target']
    x_train = train[['다른 feature_names']]
    y_test = test.iloc[:, -1]
    x_test = test.iloc[:, :-1]
    
* 함수 train_test_split() 
    from sklearn.model_selection import train_test_split
    train_test_split(
        *arrays,           # *는 데이터 무한대로 쓸 수 있음
        test_size=None,    # test와 train이 1을 나눠 가짐
        train_size=None,
        random_state=None, # 값을 설정하지 않으면 값 변동됨/ 쓰면 고정됨
        shuffle=True,      # 데이터를 분리하기전 미리 섞을지  
        stratify=None)     # 종속변수의 범주를 균등하게 만들어줌
 
2. 모델학습
    from sklearn.tree import DecisionTreeClassifier
    dt_clf = DecisionTreeClassifier(random_state = 0)
    dt_clf.fit(X_train, y_train)

3. 예측  
    pred = dt_clf.predict(X_test)
    
4. 평가  
    from sklearn.metrics import accuracy_score
    acc = accuracy_score(y_test, pred)
   
    
